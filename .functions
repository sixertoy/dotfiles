#!/usr/bin/env bash

# ------------------------------------------------
#
# OS
#
# ------------------------------------------------

#
# Create a new directory and enter it
#
function mkd() {
	mkdir -p "$@" && cd "$_";
}

#
# Determine size of a file or total size of a directory
#
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

#
# brew install https://raw.githubusercontent.com/icholy/ttygif/master/ttygif.rb
#
# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
#
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

#
# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
#
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`â€¦";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}

# ------------------------------------------------
#
# GIT Functions
#
# ------------------------------------------------

#
# Show current branch name
#

function gitbrname() {
  BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
  echo $BRANCH_NAME
}

#
# Show currents commits to be pushed
#

function pendings() {
  PENDING=$(git log origin/$(git rev-parse --abbrev-ref HEAD)..)
  if [ ! -z '$PENDING' ]; then
    echo -e '\033[0;33mNo commits waiting to be pushed\033[0m'
  else
    echo $PENDING
  fi
}

#
# Show local git branches colored with description and last commit
# current branch is prefixed by '*'
#

function br() {
  BRANCHES=$(git for-each-ref --format='%(refname)' refs/heads/ | sed 's|refs/heads/||')
  for BRANCH in $BRANCHES; do
    DESC=$(git config branch.$BRANCH.description)
    LOG=$(git log --oneline $BRANCH -1)
    if [ $BRANCH == $(git rev-parse --abbrev-ref HEAD) ]; then
      BRANCH="\033[0;32m* $BRANCH\033[0m"
    else
      BRANCH="\033[0;33m $BRANCH\033[0m"
    fi
    echo -e "$BRANCH   \033[0;36m$DESC\033[0m\n   $LOG"
  done
}


#
# Delete a remote branch or a tag
#

function delremote() {
  git push --delete origin $1
}
