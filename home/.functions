#!/usr/bin/env bash

# ------------------------------------------------
#
# OS
#
# ------------------------------------------------

#
# Create a new directory and enter it
#
function mkd() {
  mkdir -p "$@" && cd "$_";
}

#
# Determine size of a file or total size of a directory
#
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

#
# brew install https://raw.githubusercontent.com/icholy/ttygif/master/ttygif.rb
#
# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
#
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

#
# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
#
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`â€¦";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}

# ------------------------------------------------
#
# GIT Functions
#
# ------------------------------------------------

#
# Show current branch name
#

function gitbrname() {
  BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
  echo $BRANCH_NAME
}

#
# Show currents commits to be pushed
#

function git-pendings() {
  PENDING=$(git log origin/$(git rev-parse --abbrev-ref HEAD)..)
  if [ ! -z '$PENDING' ]; then
    echo -e '\033[0;33mNo commits waiting to be pushed\033[0m'
  else
    echo $PENDING
  fi
}

#
# Show local git branches colored with description and last commit
# current branch is prefixed by '*'
#

function br() {
  BRANCHES=$(git for-each-ref --format='%(refname)' refs/heads/ | sed 's|refs/heads/||')
  for BRANCH in $BRANCHES; do
    DESC=$(git config branch.$BRANCH.description)
    LOG=$(git log --oneline $BRANCH -1)
    if [ $BRANCH == $(git rev-parse --abbrev-ref HEAD) ]; then
      BRANCH="\033[0;32m* $BRANCH\033[0m"
    else
      BRANCH="\033[0;33m $BRANCH\033[0m"
    fi
    echo -e "$BRANCH   \033[0;36m$DESC\033[0m\n   $LOG"
  done
}

function git-delremote() {
  git push --delete origin $1
}

function git-bisect () {
  if [ -z "$1" ]; then
    echo "Missing argument for bad commit"
    return
  fi
  if test "$#" -ne 2; then
    GOOD_COMMIT='HEAD'
    BAD_COMMIT=$1
  else
    GOOD_COMMIT=$1
    BAD_COMMIT=$2
  fi
  ERROR=$(git cat-file -e $GOOD_COMMIT^{commit} 2>&1)
  if [ -n "$ERROR" ]; then
    echo -e "\033[31mArgument #1 is not a valid commit\033[0m $GOOD_COMMIT"
    return
  fi
  ERROR=$(git cat-file -e $BAD_COMMIT^{commit} 2>&1)
  if [ -n "$ERROR" ]; then
    echo -e "\033[31mArgument #2 is not a valid commit\033[0m $BAD_COMMIT"
    return
  fi
  git bisect start
  git bisect bad $GOOD_COMMIT
  git bisect good $BAD_COMMIT
}

function git-bisect-nok () {
  git bisect bad
}

function git-bisect-ok () {
  git bisect good
}

function git-bisect-stop () {
  git bisect reset
}


# ------------------------------------------------
#
# Apache
#
# ------------------------------------------------

function apache-service-start() {
  sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist
}

function apache-service-stop() {
  sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist
}

function apache-service-running() {
  sudo launchctl list | grep apache
}

function apache-stop() {
  sudo apachectl -k graceful-stop
}

function apache-start() {
  sudo apachectl -k start
}

function apache-restart() {
  # https://httpd.apache.org/docs/2.2/stopping.html
  sudo apachectl -k restart
}

# ------------------------------------------------
#
# NodeJS/NPM
#
# ------------------------------------------------

function init-dotfiles() {
  DOTFILES_BASE=raw.githubusercontent.com/sixertoy/dotfiles/master
  # ----- Precommit Script
  # add to package.json in scripts section
  # { "precommit": "sh ./.scripts/hooks/precommit.sh" }
  FILE_NAME=precommit.sh
  FILE_URL=https://$DOTFILES_BASE/scripts-hooks/precommit.sh
  mkdir -p ./.scripts/hooks
  curl -o ./.scripts/hooks/$FILE_NAME $FILE_URL
  chmod +x ./.scripts/hooks/$FILE_NAME
  # ----- ESLint config
  FILE_NAME=.eslintrc.json
  FILE_URL=https://$DOTFILES_BASE/home/.eslintrc.json
  curl -o ./$FILE_NAME $FILE_URL
  # ----- StyleLint config
  FILE_NAME=.stylelintrc.json
  FILE_URL=https://$DOTFILES_BASE/home/$FILE_NAME
  curl -o ./$FILE_NAME $FILE_URL
  # ----- Prettier config
  FILE_NAME=.prettierrc.json
  FILE_URL=https://$DOTFILES_BASE/home/$FILE_NAME
  curl -o ./$FILE_NAME $FILE_URL
}

# gitignore.io
# @see https://www.gitignore.io/docs
function init-gitignore() {
  curl -L -s https://www.gitignore.io/api/windows,linux,osx,macos,node > .gitignore
}

function init-linter() {
  # AirBNB ESLint
  npx install-peerdeps eslint-config-airbnb eslint-config-prettier --dev --exact
  yarn add babel-eslint --dev --exact
  # StyleLint
  yarn add stylelint stylelint-config-standard stylelint-order stylelint-scss --dev --exact
  # Prettier
  yarn add  prettier prettier-eslint prettier-eslint-cli prettier-stylelint husky --dev --exact
}

function init-react() {
  if [ -z "$1" ]; then
    echo "Missing argument for init-react command"
    return
  fi
  create-react-app $1
  cd $1
  init-project
  # Install React dependencies
  yarn add prop-types --save --exact
}

function init-project() {
  mkdir -p .kiss
  mkdir -p src/app
  mkdir -p src/scss
  mkdir -p src/static
  mkdir -p .scripts/hooks
  git init
  init-gitignore
  init-linter
  init-dotfiles
}

function search() {
  open /Applications/Opera.app/ "http://www.google.com/search?q=$1";
}
